#!/usr/bin/make -f

DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
DEB_HOST_ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq ($(DEB_HOST_ARCH), amd64)
TENSORFLOW_BUILD := yes
else
TENSORFLOW_BUILD := no
endif
SHELL := /bin/bash

ifeq ($(DEB_HOST_ARCH), amd64)
CXXFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC -std=c++11 -msse4.2 -mfpmath=sse
CFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC -msse4.2 -mfpmath=sse
else
CXXFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC -std=c++11
CFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC
endif

export TF_VERSION=1.15.2
export BAZEL_OUTPUT=/tmp/bazel_output

topdir=$(shell pwd)
buildroot=${topdir}/debian/tmp
_prefix ?= /usr
_libdir ?= ${_prefix}/lib/${DEB_HOST_MULTIARCH}
_includedir ?= ${_prefix}/include
packagingdir=${topdir}/debian/packages

%:
	dh $@ --parallel

override_dh_auto_clean:
	rm -f debian/tensorflow-c.links
	rm -f debian/tensorflow-c-dev.links
	rm -rf ${BAZEL_OUTPUT}

override_dh_auto_configure:
ifeq ($(TENSORFLOW_BUILD), yes)
	sed 's/@DEB_HOST_MULTIARCH@/$(DEB_HOST_MULTIARCH)/g' \
		debian/tensorflow-c.links.in > debian/tensorflow-c.links
	sed 's/@DEB_HOST_MULTIARCH@/$(DEB_HOST_MULTIARCH)/g' \
		debian/tensorflow-c-dev.links.in > debian/tensorflow-c-dev.links
	mkdir -p ${BAZEL_OUTPUT}
	packages_path=${packagingdir} $(SHELL) ${topdir}/debian/package_preparation.sh
	patch -p1 < debian/WORKSPACE.patch
endif

override_dh_auto_build:
ifeq ($(TENSORFLOW_BUILD), yes)
	# If it's eoan (19.10), gcc-9 has some regressions. Use gcc-8 instead if it's eoan.
	if [ -f /usr/bin/gcc-8 ]; then export CC=gcc-8; export CXX=g++-8; fi; bazel --output_user_root=${BAZEL_OUTPUT} build  --repository_cache=${packagingdir} --distdir=${packagingdir} -c opt //tensorflow/tools/lib_package:libtensorflow

	### Gen .pc file ###
	# -p, --prefix	set installation prefix (default: /usr/local)
	# -l, --libdir	set lib directory (default: lib)
	# -v, --version	set TensorFlow version
	# -h, --help	display this message
	$(SHELL) ${topdir}/tensorflow/c/generate-pc.sh -p ${_prefix} -l lib/${DEB_HOST_MULTIARCH} -v ${TF_VERSION}
endif

override_dh_shlibdeps:
	# ignore RPATH different issue

override_dh_auto_install:
	install -d ${buildroot}
	install -d ${buildroot}${_libdir}
	install -d ${buildroot}${_libdir}/pkgconfig
	install -d ${buildroot}${_includedir}

ifeq ($(TENSORFLOW_BUILD), yes)
	tar -xf ${topdir}/bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz
	install -d ${buildroot}${_includedir}/tensorflow
	install -d ${buildroot}${_includedir}/tensorflow/c
	install -d ${buildroot}${_includedir}/tensorflow/c/eager

	install -m 0644 include/tensorflow/c/*.h ${buildroot}${_includedir}/tensorflow/c/
	install -m 0644 include/tensorflow/c/eager/*.h ${buildroot}${_includedir}/tensorflow/c/eager/
	install -m 0644 lib/*.so* ${buildroot}${_libdir}/
	install -m 0644 tensorflow.pc ${buildroot}${_libdir}/pkgconfig/
endif
